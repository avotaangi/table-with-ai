document.addEventListener('DOMContentLoaded', () => {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    document.getElementById('add-row').addEventListener('click', () => {
        const tableBody = document.querySelector('table tbody');
        const headers = document.querySelectorAll('table thead th');
        const newRow = document.createElement('tr');

        // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–µ–π—Å—Ç–≤–∏–π)
        for (let i = 0; i < headers.length - 1; i++) {
            const cell = document.createElement('td');
            cell.contentEditable = 'true';
            cell.textContent = ''; // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
            newRow.appendChild(cell);
        }

        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        const actionsCell = document.createElement('td');
        actionsCell.innerHTML = `
            <button type="button" class="btn btn-sm btn-danger delete-row">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            <button type="button" class="btn btn-sm btn-secondary move-up">‚Üë</button>
            <button type="button" class="btn btn-sm btn-secondary move-down">‚Üì</button>`;
        newRow.appendChild(actionsCell);

        tableBody.appendChild(newRow);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑
    document.querySelector('table tbody').addEventListener('click', (e) => {
        if (e.target.classList.contains('delete-row')) {
            e.target.closest('tr').remove();
        } else if (e.target.classList.contains('move-up')) {
            const currentRow = e.target.closest('tr');
            const previousRow = currentRow.previousElementSibling;
            if (previousRow) {
                currentRow.parentNode.insertBefore(currentRow, previousRow);
            }
        } else if (e.target.classList.contains('move-down')) {
            const currentRow = e.target.closest('tr');
            const nextRow = currentRow.nextElementSibling;
            if (nextRow) {
                currentRow.parentNode.insertBefore(nextRow, currentRow);
            }
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ fetch
    document.getElementById('table-form').addEventListener('submit', function (e) {
        e.preventDefault();

        const tableRows = document.querySelectorAll('table tbody tr');
        const tableData = [];

        // –°–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü "–î–µ–π—Å—Ç–≤–∏—è")
        const headers = Array.from(document.querySelectorAll('table thead th'))
            .slice(0, -1)
            .map(th => th.textContent.trim());
        tableData.push(headers);

        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        tableRows.forEach(row => {
            const rowData = Array.from(row.querySelectorAll('td'))
                .slice(0, -1) // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü "–î–µ–π—Å—Ç–≤–∏—è"
                .map(td => td.textContent.trim());
            if (rowData.length === headers.length) {
                tableData.push(rowData);
            }
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ fetch
        fetch(this.action, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ table_data: tableData })
        }).then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    alert('–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + data.message);
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.');
            });
    });
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ
    document.querySelectorAll('.text-muted').forEach(element => {
        const utcTime = element.textContent.match(/–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: (.+)/);
        if (utcTime && utcTime[1]) {
            const localTime = new Date(utcTime[1]).toLocaleString();
            element.textContent = `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${localTime}`;
        }
    });
});